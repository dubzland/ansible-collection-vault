---
variables:
  DOCKER_BUILDKIT: 1
  DOCKER_TLS_CERTDIR: "/certs"
  BASH_ENV: /root/.bashrc
  GIT_CLONE_PATH: $CI_BUILDS_DIR/ansible/collections/ansible_collections/$CI_PROJECT_NAMESPACE/vault
  REGISTRY_PROXY_URL: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/
  XDG_CACHE_DIR: "$CI_PROJECT_DIR/.cache"
  PIP_CACHE_DIR: "$XDG_CACHE_DIR/pip"
  PY_COLORS: "1"
  ANSIBLE_FORCE_COLOR: "1"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/"

stages:
  - lint
  - test
  - build
  - deploy

.ansible:
  cache:
    paths:
      - .cache/pip/

.sanity:
  extends: .ansible
  stage: lint
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/jdubz/ci-python:${PYTHON_VERSION}
  before_script:
    - echo -e "[global]\ncache-dir = $PIP_CACHE_DIR" > /etc/pip.conf
    - python -m pip install https://github.com/ansible/ansible/archive/${ANSIBLE_VERSION}.tar.gz
  script:
    - ansible-test sanity --local --requirements --junit
  artifacts:
    when: always
    reports:
      junit: tests/output/**/*.xml

sanity:
  extends: .sanity
  variables:
    PYTHON_VERSION: "3.12"
    ANSIBLE_VERSION: "stable-2.16"
  only:
    refs:
      - merge_requests
      - main

sanity-release:
  extends: .sanity
  parallel:
    matrix:
      - PYTHON_VERSION: "3.9"
        ANSIBLE_VERSION:
          - "stable-2.14"
          - "stable-2.15"
      - PYTHON_VERSION: "3.10"
        ANSIBLE_VERSION:
          - "stable-2.14"
          - "stable-2.15"
          - "stable-2.16"
          - "stable-2.17"
          - "devel"
          - "milestone"
      - PYTHON_VERSION: "3.11"
        ANSIBLE_VERSION:
          - "stable-2.14"
          - "stable-2.15"
          - "stable-2.16"
          - "stable-2.17"
          - "devel"
          - "milestone"
      - PYTHON_VERSION: "3.12"
        ANSIBLE_VERSION:
          - "stable-2.16"
          - "stable-2.17"
          - "devel"
          - "milestone"
  only:
    refs:
      - tags

.molecule:
  extends: .ansible
  stage: test
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/jdubz/ci-python:${PYTHON_VERSION}-docker
  services:
    - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:24.0.7-dind
      alias: docker
  before_script:
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - echo -e "[global]\ncache-dir = $PIP_CACHE_DIR" > /etc/pip.conf
    - python -m pip install https://github.com/ansible/ansible/archive/${ANSIBLE_VERSION}.tar.gz
    - python -m pip install -r requirements-test.txt
    - cd extensions
  script:
    - molecule test

molecule:
  extends: .molecule
  variables:
    PYTHON_VERSION: "3.12"
    ANSIBLE_VERSION: "stable-2.16"
  only:
    refs:
      - merge_requests
      - main

molecule-release:
  extends: .molecule
  parallel:
    matrix:
      - PYTHON_VERSION: "3.9"
        ANSIBLE_VERSION:
          - "stable-2.15"
      - PYTHON_VERSION: "3.10"
        ANSIBLE_VERSION:
          - "stable-2.15"
          - "stable-2.16"
          - "devel"
          - "milestone"
      - PYTHON_VERSION: "3.11"
        ANSIBLE_VERSION:
          - "stable-2.15"
          - "stable-2.16"
          - "devel"
          - "milestone"
      - PYTHON_VERSION: "3.12"
        ANSIBLE_VERSION:
          - "stable-2.16"
          - "devel"
          - "milestone"
  only:
    refs:
      - tags

build:
  stage: build
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/jdubz/ci-python:3.10
  cache:
    paths:
      - .cache/pip/
  before_script:
    - python -m pip install ansible-core
  script:
    - ansible-galaxy collection build
    - sha256sum "${CI_PROJECT_NAMESPACE}-vault-${CI_COMMIT_TAG}.tar.gz" > "${CI_PROJECT_NAMESPACE}-vault-${CI_COMMIT_TAG}.tar.gz.sha256sum"
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
        --upload-file ${CI_PROJECT_NAMESPACE}-vault-${CI_COMMIT_TAG}.tar.gz \
        ${PACKAGE_REGISTRY_URL}/${CI_PROJECT_NAMESPACE}-vault/${CI_COMMIT_TAG}/${CI_PROJECT_NAMESPACE}-vault-${CI_COMMIT_TAG}.tar.gz
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
        --upload-file ${CI_PROJECT_NAMESPACE}-vault-${CI_COMMIT_TAG}.tar.gz.sha256sum \
        ${PACKAGE_REGISTRY_URL}/${CI_PROJECT_NAMESPACE}-vault/${CI_COMMIT_TAG}/${CI_PROJECT_NAMESPACE}-vault-${CI_COMMIT_TAG}.tar.gz.sha256sum
  artifacts:
    paths:
      - "${CI_PROJECT_NAMESPACE}-vault-${CI_COMMIT_TAG}.tar.gz"
  only:
    refs:
      - tags


release:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      release-cli create --name "Release $CI_COMMIT_TAG" \
        --description "See ${CI_PROJECT_URL}/-/blob/${CI_COMMIT_TAG}/CHANGELOG.md for more information." \
        --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"${CI_PROJECT_NAMESPACE}-vault-${CI_COMMIT_TAG}.tar.gz\",\"url\":\"${PACKAGE_REGISTRY_URL}/${CI_PROJECT_NAMESPACE}-vault/${CI_COMMIT_TAG}/${CI_PROJECT_NAMESPACE}-vault-${CI_COMMIT_TAG}.tar.gz\"}" \
        --assets-link "{\"name\":\"${CI_PROJECT_NAMESPACE}-vault-${CI_COMMIT_TAG}.tar.gz.sha256sum\",\"url\":\"${PACKAGE_REGISTRY_URL}/${CI_PROJECT_NAMESPACE}-vault/${CI_COMMIT_TAG}/${CI_PROJECT_NAMESPACE}-vault-${CI_COMMIT_TAG}.tar.gz.sha256sum\"}" \

galaxy:
  stage: deploy
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/jdubz/ci-python:3.10
  cache:
    paths:
      - .cache/pip/
  dependencies:
    - build
  before_script:
    - python -m pip install ansible-core
  script:
    - ansible-galaxy collection publish --token "$GALAXY_API_TOKEN" "./${CI_PROJECT_NAMESPACE}-vault-${CI_COMMIT_REF_NAME}.tar.gz"
  only:
    refs:
      - tags
